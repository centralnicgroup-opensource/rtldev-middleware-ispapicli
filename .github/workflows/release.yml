name: Release
on:
  push:
    branches:
      - "master"

jobs:
  build:
    name: Build
    uses: ./.github/workflows/test.yml

  generate-linux-bin:
    name: Generate Linux bin
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.
      - name: Checkout python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ secrets.PYTHON_MIN_VERSION }}
      - name: Install python dependencies
        run: |
          pip install --upgrade pip
          pip -V
          pip install --upgrade -e .
      - name: Setup NodeJS LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
      - name: Install NodeJS dependencies
        run: npm ci
      - name: Release - version update only
        run: |
          echo '{"plugins": ["@semantic-release/commit-analyzer", ["@semantic-release/exec", { "verifyReleaseCmd": "./updateVersion.sh ${nextRelease.version}" }]]}' > '.releaserc.json'
          cat .releaserc.json
          npx semantic-release --dry-run
      - name: Run Pyinstaller
        run: |
          "./scripts/linux-pyinstaller.sh"
        # upload linux-binary
      - name: Upload linux-binary
        uses: actions/upload-artifact@v3
        with:
          name: linux-binary
          path: linux-binary-latest.zip
          retention-days: 1
  generate-macos-bin:
    name: Generate MacOS bin
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.
      - name: Checkout python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ secrets.PYTHON_MIN_VERSION }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip -V
          pip install --upgrade -e .
      - name: Setup NodeJS LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
      - name: Install NodeJS dependencies
        run: npm ci
      - name: Release - version update only
        run: |
          echo '{"plugins": ["@semantic-release/commit-analyzer", ["@semantic-release/exec", { "verifyReleaseCmd": "./updateVersionMacOS.sh ${nextRelease.version}" }]]}' > '.releaserc.json'
          cat .releaserc.json
          npx semantic-release --dry-run
      - name: Run Pyinstaller
        run: |
          "./scripts/macos-pyinstaller.sh"
        # upload macos-binary
      - name: Upload macos-binary
        uses: actions/upload-artifact@v3
        with:
          name: macos-binary
          path: macos-binary-latest.zip
          retention-days: 1
  generate-win-bin:
    name: Generate Win bin
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.
      - name: Checkout python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ secrets.PYTHON_MIN_VERSION }}
      - name: Install python dependencies
        run: |
          pip install --upgrade pip
          pip -V
          pip install --upgrade -e .
      - name: Setup NodeJS LTS
        uses: actions/setup-node@v3
      - name: Install NodeJS dependencies
        run: npm ci
      - name: Release - version update only
        run: |
          echo '{"plugins": ["@semantic-release/commit-analyzer", ["@semantic-release/exec", { "verifyReleaseCmd": "Bash updateVersion.sh ${nextRelease.version}" }]]}' > '.releaserc.json'
          cat .releaserc.json
          npx semantic-release --dry-run
      - name: Run Pyinstaller
        run: |
          & "./scripts/win-pyinstaller.ps1"
        # upload win-binary
      - name: Upload win-binary
        uses: actions/upload-artifact@v3
        with:
          name: win-binary
          path: win-binary-latest.zip
          retention-days: 1
  release:
    name: Release Job
    runs-on: ubuntu-latest
    needs:
      - generate-linux-bin
      - generate-macos-bin
      - generate-win-bin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ secrets.PYTHON_MIN_VERSION }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip testresources setuptools wheel
          pip -V
          pip install --upgrade -e .
      - name: Setup NodeJS LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
      - name: Install dependencies
        run: |
          npm ci
          gulp validate
      # download all our binary files
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: npx semantic-release
